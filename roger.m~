%% Creation of the data
%creation of the data
% clear all
% close all

MastaError=zeros(2,3);
MastaTime=zeros(2,3);

x=zeros(1,1600);
x(1)=1.5;
for ii=1:1599
    if ii<26
        x(ii+1) = 0.9*x(ii);
    else
        x(ii+1) = 0.9 * x(ii) +(0.2*x(ii-25))/(1+(x(ii-25))^10);
    end
end


%%plotting
% figure(1)
% hold on
% %plot(x)


for i=1:100
%% 1

%for the question 4.4, add some noise
sigma = 0.03;  %change this value from time to time
z = randn(1,1600)*sigma*sigma;

figure(1)
hold on
%plot(x(:,1306:1505))
x=x+z;
%plot(x(:,1306:1505))
%input output
t = 301:1500;
input = [x(t-20); x(t-15); x(t-10); x(t-5); x(t)];
output = x(t+5);


net = feedforwardnet(2, 'trainbfg');
net.trainParam.showWindow = false;   %no window
net.divideFcn='divideblock';
net.divideParam.trainRatio=700/1200;
net.divideParam.valRatio=300/1200;
net.divideParam.testRatio=200/1200;   %set 200 last values in the test set
%         

%training of the network
tic
[net,tr] = train(net,input,output);
MastaError(1,1)=toc;

%% 2

sigma = 0.03;  %change this value from time to time
z = randn(1,1600)*sigma*sigma;

figure(1)
hold on
%plot(x(:,1306:1505))
x=x+z;
%plot(x(:,1306:1505))
%input output
t = 301:1500;
input = [x(t-20); x(t-15); x(t-10); x(t-5); x(t)];
output = x(t+5);


net = feedforwardnet([2 2], 'trainbfg');
net.trainParam.showWindow = false;   %no window
net.divideFcn='divideblock';
net.divideParam.trainRatio=700/1200;
net.divideParam.valRatio=300/1200;
net.divideParam.testRatio=200/1200;   %set 200 last values in the test set
%         

%training of the network
tic
[net,tr] = train(net,input,output);
MastaError(2,1)=toc;

%% 3
sigma = 0.09;  %change this value from time to time
z = randn(1,1600)*sigma*sigma;

figure(1)
hold on
%plot(x(:,1306:1505))
x=x+z;
%plot(x(:,1306:1505))
%input output
t = 301:1500;
input = [x(t-20); x(t-15); x(t-10); x(t-5); x(t)];
output = x(t+5);


net = feedforwardnet(5, 'trainbfg');
net.trainParam.showWindow = false;   %no window
net.divideFcn='divideblock';
net.divideParam.trainRatio=700/1200;
net.divideParam.valRatio=300/1200;
net.divideParam.testRatio=200/1200;   %set 200 last values in the test set
%         

%training of the network
tic
[net,tr] = train(net,input,output);
MastaError(1,2)=toc;

%% 4
sigma = 0.09;  %change this value from time to time
z = randn(1,1600)*sigma*sigma;

figure(1)
hold on
%plot(x(:,1306:1505))
x=x+z;
%plot(x(:,1306:1505))
%input output
t = 301:1500;
input = [x(t-20); x(t-15); x(t-10); x(t-5); x(t)];
output = x(t+5);


net = feedforwardnet([5 5], 'trainbfg');
net.trainParam.showWindow = false;   %no window
net.divideFcn='divideblock';
net.divideParam.trainRatio=700/1200;
net.divideParam.valRatio=300/1200;
net.divideParam.testRatio=200/1200;   %set 200 last values in the test set
%         

%training of the network
tic
[net,tr] = train(net,input,output);
MastaError(2,2)=toc;

%% 5

sigma = 0.18;  %change this value from time to time
z = randn(1,1600)*sigma*sigma;

figure(1)
hold on
%plot(x(:,1306:1505))
x=x+z;
%plot(x(:,1306:1505))
%input output
t = 301:1500;
input = [x(t-20); x(t-15); x(t-10); x(t-5); x(t)];
output = x(t+5);


net = feedforwardnet(8, 'trainbfg');
net.trainParam.showWindow = false;   %no window
net.divideFcn='divideblock';
net.divideParam.trainRatio=700/1200;
net.divideParam.valRatio=300/1200;
net.divideParam.testRatio=200/1200;   %set 200 last values in the test set
%         

%training of the network
tic
[net,tr] = train(net,input,output);
MastaError(1,3)=toc;

%% 6
sigma = 0.18;  %change this value from time to time
z = randn(1,1600)*sigma*sigma;

figure(1)
hold on
%plot(x(:,1306:1505))
x=x+z;
%plot(x(:,1306:1505))
%input output
t = 301:1500;
input = [x(t-20); x(t-15); x(t-10); x(t-5); x(t)];
output = x(t+5);


net = feedforwardnet([8 8], 'trainbfg');
net.trainParam.showWindow = false;   %no window
net.divideFcn='divideblock';
net.divideParam.trainRatio=700/1200;
net.divideParam.valRatio=300/1200;
net.divideParam.testRatio=200/1200;   %set 200 last values in the test set
%         

%training of the network
tic
[net,tr] = train(net,input,output);
MastaError(2,3)=toc;

MastaTime=MastaTime+MastaError

end

MastaTime=Ma

figure
bar(MastaError')
legend('2-layers','3-layers')
xlabel('#Nodes per layer')
ylabel('Training Time [s]')
xticklabels(sprintf('2\n5\n8'))
set(gca,'fontsize',14)

